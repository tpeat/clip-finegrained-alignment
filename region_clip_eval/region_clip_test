"""

Evaluate Region CLIP zero shot inference on a single image for testing purposes

"""

from detectron2.config import get_cfg
from detectron2.engine import DefaultPredictor
from detectron2.utils.visualizer import Visualizer
import cv2
import argparse
import time


def parse_args():
    parser= argparse.ArgumentParser(description="inference on single test image")
    parser.add_argument(
        "--image_path", type=str, help="path to img"
    )
    return parser.parse_args()

def main():
    start_time=time.time()
    args = parse_args()
    cfg = get_cfg()
    

    # if not torch.cuda.is_available():
    #     print("no cuda")
        
    # else:
    #     print("using cuda")
    # print("____________________________")

    cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.2
    predictor = DefaultPredictor(cfg)
    image = cv2.imread(args.image_path)
    outputs = predictor(image)

    v = Visualizer(image[:, :, ::-1], metadata=None, scale=1.0)
    v = v.draw_instance_predictions(outputs["instances"].to("cpu"))

    boxes= outputs["instances"].to("cpu").pred_boxes if outputs["instances"].to("cpu").has("pred_boxes") else None
    if boxes:
        print("detected boxes: ")
        print(boxes.tensor.numpy())
        with open("output_boxes.txt", "w") as f:
            for box in boxes:
                f.write(f"{box.tolist()}\n")


    cv2.imwrite("output_visualization.png", v.get_image()[:, :, ::-1])
    end_time=time.time()
    print(f"Time taken for script execution: {end_time - start_time:.2f} seconds")

if __name__ == "__main__":
    main()